-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity DNN_HiddenLayer_2_bias_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 6; 
             mem_size    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of DNN_HiddenLayer_2_bias_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111111111000000111010111011110", 
    1 => "11000001101111001111110100101010", 
    2 => "01000000000110011100010001110111", 
    3 => "01000000010110001001011110101010", 
    4 => "01000000110111100011100000010001", 
    5 => "11000001000001110100000110000111", 
    6 => "11000000011101101110011111010001", 
    7 => "01000010010001101101010100100110", 
    8 => "11000000110100000010110101111011", 
    9 => "10111111101101110111001000100111", 
    10 => "00111111101111000010101111001110", 
    11 => "00111111111111001011010101010011", 
    12 => "01000001100010010111101100010010", 
    13 => "11000001010001100001101001110111", 
    14 => "00111111000110011000010000111101", 
    15 => "10111111001011110011111100110110", 
    16 => "00111110111010110001111100100010", 
    17 => "11000001010010100101011110110100", 
    18 => "10111111011010000101101111001011", 
    19 => "11000000100100001010011110100100", 
    20 => "01000000000110110101011001001100", 
    21 => "11000001001000010110001011101111", 
    22 => "11000001010110111001111101000001", 
    23 => "11000001001101110111010011100100", 
    24 => "01000000100011101100011011111100", 
    25 => "11000000111011110110100001001000", 
    26 => "11000001010110101100100011101000", 
    27 => "11000000110100000100100100110010", 
    28 => "11000000100001010111001000110001", 
    29 => "01000000010101101101000011111011", 
    30 => "11000000101000111011111010010000", 
    31 => "11000001000111111001111011010001", 
    32 => "01000001101100010001011100111101", 
    33 => "11000001000010001111110000010011", 
    34 => "11000000001101111101111101010001", 
    35 => "11000000110110001100110110011001", 
    36 => "01000000100101110010100000110011", 
    37 => "01000000001000010100111001100111", 
    38 => "01000000011011011101000000111100", 
    39 => "11000000101011000001101100111111", 
    40 => "11000000101001100000111100110000", 
    41 => "11000000111101000011001011101101", 
    42 => "11000000101010101110011001011001", 
    43 => "11000000000111010001101111100101", 
    44 => "11000000110101101100000100111110", 
    45 => "11000000000111011101100010001001", 
    46 => "11000000101110011110010100011111", 
    47 => "11000000101110000000011101011100", 
    48 => "11000000000111010001000101110000", 
    49 => "00111101001010010001010101111010", 
    50 => "11000000110001111000000011010000", 
    51 => "11000000101001010100101000011101", 
    52 => "11000001010110011100011001000000", 
    53 => "11000001011010111000010010110111", 
    54 => "11000000100011111111111010111000", 
    55 => "10111110001001111101010000000000", 
    56 => "10111111100101001000001110111011", 
    57 => "11000000101101000100111001111011", 
    58 => "01000000000000010111110100001000", 
    59 => "11000001000010110000101110100100", 
    60 => "11000000010010001110010111011010", 
    61 => "11000001001101010001000000010100", 
    62 => "11000000111001010110010010010010", 
    63 => "10111110000011100111100100101000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity DNN_HiddenLayer_2_bias is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of DNN_HiddenLayer_2_bias is
    component DNN_HiddenLayer_2_bias_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    DNN_HiddenLayer_2_bias_rom_U :  component DNN_HiddenLayer_2_bias_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


