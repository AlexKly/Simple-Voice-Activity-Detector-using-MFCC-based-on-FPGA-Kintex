-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity DNN_batchNormalization_beta_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 6; 
             mem_size    : integer := 39
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of DNN_batchNormalization_beta_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "00111111011101010110001010010001", 
    1 => "10111111110110000101100111001111", 
    2 => "10111110011101110010110111101011", 
    3 => "00111110101100011000111101010011", 
    4 => "00111110100110010011100111001010", 
    5 => "00111111110110000110101110110011", 
    6 => "00111101000110011111001101010011", 
    7 => "00111101000110111001100001100110", 
    8 => "00111101110111000101011001111000", 
    9 => "10111101100100010100000010111001", 
    10 => "10111101110111111000001110010011", 
    11 => "01000000001011100101011010111100", 
    12 => "00111110010011001110000011111000", 
    13 => "00111110100100111101010000010100", 
    14 => "10111110101011100101010010011001", 
    15 => "00111110100001010000101100101010", 
    16 => "10111110101001100001001100010111", 
    17 => "00111101011001101100110101110101", 
    18 => "00111110100011100111011101110001", 
    19 => "10111101111100011101001001101111", 
    20 => "00111100101010000101110110011111", 
    21 => "10111101111110001101010101100111", 
    22 => "00111110010100111110011100101110", 
    23 => "10111101111100000111111001100000", 
    24 => "00111111001101100101100111101000", 
    25 => "11000000100101000011111010011000", 
    26 => "00111111001100101111010110110001", 
    27 => "10111110101011010111010111000010", 
    28 => "10111110000100100000010101100111", 
    29 => "00111110111011110001010110101011", 
    30 => "10111110011110100100110011101100", 
    31 => "00111111001010111001111110001000", 
    32 => "10111101111000011010111100011011", 
    33 => "10111101100000011110101001111011", 
    34 => "00111101101011011011100110000100", 
    35 => "00111101111110110111011001100011", 
    36 => "10111110010011100100111001010000", 
    37 => "00111111000011011010100000011101", 
    38 => "00111101010001100011010001101010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity DNN_batchNormalization_beta is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 39;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of DNN_batchNormalization_beta is
    component DNN_batchNormalization_beta_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    DNN_batchNormalization_beta_rom_U :  component DNN_batchNormalization_beta_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


