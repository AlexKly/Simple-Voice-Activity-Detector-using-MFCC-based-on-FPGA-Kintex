-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity DNN_batchNormalization_std_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 6; 
             mem_size    : integer := 39
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of DNN_batchNormalization_std_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "01000010101011111001000101100010", 
    1 => "01000011011000111011101101011110", 
    2 => "01000011011101001101100010001110", 
    3 => "01000011010100011000101100000110", 
    4 => "01000011011001110110111001000101", 
    5 => "01000011100001110000000111001110", 
    6 => "01000011011010101111100001101110", 
    7 => "01000011011000010111000101010011", 
    8 => "01000011010010010011000110011011", 
    9 => "01000011010000100100111110110001", 
    10 => "01000011001011001000010001000000", 
    11 => "01000011001010001000101000110010", 
    12 => "01000011000100110101111011000110", 
    13 => "00111111100001101011000000101001", 
    14 => "01000000101001010100011000001100", 
    15 => "01000000101010010101111001010110", 
    16 => "01000000101011101100000011001100", 
    17 => "01000000110100110001011111110001", 
    18 => "01000001000000110010010100000111", 
    19 => "01000001000001001100110100100101", 
    20 => "01000001000010010111001101001101", 
    21 => "01000001000011110111110011111110", 
    22 => "01000001000011011000111010001100", 
    23 => "01000001000000010110101100101101", 
    24 => "01000000111101011011111100001011", 
    25 => "01000000110110101111110010110011", 
    26 => "00111110001010100001001011000010", 
    27 => "00111111010010010000110011001110", 
    28 => "00111111010110111110101110011011", 
    29 => "00111111011110000000011011110111", 
    30 => "00111111100011011111111000100001", 
    31 => "00111111101110111001010001110011", 
    32 => "00111111110001001110100001001110", 
    33 => "00111111110100000111101010001001", 
    34 => "00111111110111101100111110111000", 
    35 => "00111111110101001000000100001000", 
    36 => "00111111110011111011111000001000", 
    37 => "00111111101111100000110100101010", 
    38 => "00111111101010110010101111100101" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity DNN_batchNormalization_std is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 39;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of DNN_batchNormalization_std is
    component DNN_batchNormalization_std_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    DNN_batchNormalization_std_rom_U :  component DNN_batchNormalization_std_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


