-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity DNN_batchNormalization_gamma_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 6; 
             mem_size    : integer := 39
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of DNN_batchNormalization_gamma_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "01000000100010100101111101010010", 
    1 => "00111111100111010101110101111001", 
    2 => "00111111000111000001001111011011", 
    3 => "00111110110110101111010111101000", 
    4 => "00111111000001111111010110101001", 
    5 => "00111111010111100101010010010111", 
    6 => "00111110110111000001001011101010", 
    7 => "00111110100110110111101000100001", 
    8 => "00111110110000010010001010001100", 
    9 => "00111110101111010110010101111001", 
    10 => "00111110101100100011111100110001", 
    11 => "00111111001111111101111010111001", 
    12 => "00111110110001111110011101011000", 
    13 => "00111111000101001010111000111111", 
    14 => "00111111000001010001101101001010", 
    15 => "00111110111000100001110001111010", 
    16 => "00111110101001101011000011000011", 
    17 => "00111110100110000001100100101110", 
    18 => "00111110101010100011110111111011", 
    19 => "00111110100010101011100101011011", 
    20 => "00111110100111001101111111011101", 
    21 => "00111110100101011001011010000011", 
    22 => "00111110011111010111011000111100", 
    23 => "00111110100111111000000000110101", 
    24 => "00111110100010011101001010001111", 
    25 => "00111100001001011010000001101100", 
    26 => "00111111010010111101111100100010", 
    27 => "00111111000100001000001101011000", 
    28 => "00111111000000100110010010010000", 
    29 => "00111111000101111001010001110010", 
    30 => "00111111000010000101011111001001", 
    31 => "00111111000010011010101011110111", 
    32 => "00111111000001101111111001010000", 
    33 => "00111111000010100011100101110111", 
    34 => "00111110111110010110110100101001", 
    35 => "00111110111110001111111100011011", 
    36 => "00111110111011010111110111101000", 
    37 => "00111111001101110110010000100000", 
    38 => "00111110111010010110110101111010" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity DNN_batchNormalization_gamma is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 39;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of DNN_batchNormalization_gamma is
    component DNN_batchNormalization_gamma_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    DNN_batchNormalization_gamma_rom_U :  component DNN_batchNormalization_gamma_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


