-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity DNN_HiddenLayer_1_bias_rom is 
    generic(
             dwidth     : integer := 32; 
             awidth     : integer := 7; 
             mem_size    : integer := 128
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of DNN_HiddenLayer_1_bias_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "01000010010011001101100000110101", 
    1 => "11000000110110011000110101001110", 
    2 => "01000001000011111110100001001001", 
    3 => "11000000000101100101110101001100", 
    4 => "01000000010110010111100101100001", 
    5 => "11000000011111100011100010001111", 
    6 => "11000000100011101111000001010100", 
    7 => "10111111101111001110111010100001", 
    8 => "01000001010010110000111001110110", 
    9 => "11000000000010100111100110110001", 
    10 => "00111111110011011110010110111010", 
    11 => "11000000111100110010000010010101", 
    12 => "10111111011000111111000111011010", 
    13 => "11000000100010011001000110111100", 
    14 => "11000000000010110010001001101001", 
    15 => "11000001000110110001000011000111", 
    16 => "01000000100000000001101101110011", 
    17 => "11000001011110001001000010010011", 
    18 => "01000000000110010010110110111000", 
    19 => "10111111110101011100011000010000", 
    20 => "11000001001100100010111101011010", 
    21 => "11000000100101111110101010000010", 
    22 => "00111110111001101110110110111000", 
    23 => "11000000001111100111010010110110", 
    24 => "10111110100011011000111101110001", 
    25 => "11000000011001100011101111011011", 
    26 => "01000000010000001100010101100100", 
    27 => "11000000100111110001000100001000", 
    28 => "00111111111010100110001000100001", 
    29 => "10111110000011111010100001001110", 
    30 => "10111111111010110101010010010111", 
    31 => "11000000111101101001010000110100", 
    32 => "11000000100111110101000001010000", 
    33 => "00111111111011010100000001110111", 
    34 => "11000000101110010011010110110010", 
    35 => "11000000001001001101101101010100", 
    36 => "11000000111011010011100111101001", 
    37 => "01000000100101010011111101110110", 
    38 => "10111111101001100011010111111100", 
    39 => "01000001011101000101111001100101", 
    40 => "01000010001101011001000001001101", 
    41 => "11000001000111100101011011000011", 
    42 => "10111111100111001110000110110101", 
    43 => "11000000111001101000100111000111", 
    44 => "11000000100000100000011111100110", 
    45 => "11000000100111011100110111111101", 
    46 => "11000001000010111011100001110001", 
    47 => "11000001001100001111000000110000", 
    48 => "11000000110000110000111011101100", 
    49 => "11000000010100100010100101010111", 
    50 => "01000000001011100011001000101100", 
    51 => "11000000111000110000111100000111", 
    52 => "10111111110110111010001000011111", 
    53 => "11000001000010101101011001001111", 
    54 => "01000000110001111011110111010010", 
    55 => "10111111001101011011101110111000", 
    56 => "11000000011110001011011110101100", 
    57 => "10111111001110101111001100101111", 
    58 => "11000000100110100100111001111011", 
    59 => "11000000000110010110011110100100", 
    60 => "11000000010011110101101111010110", 
    61 => "00111111010110101011111101000011", 
    62 => "10111110000000110101100011001001", 
    63 => "10111111100011111111111000111011", 
    64 => "00111111011101100111000100010100", 
    65 => "11000000001111100010011001100000", 
    66 => "01000001000001110000100000011010", 
    67 => "01000000101110001111011110101100", 
    68 => "01000000000101100011001111101111", 
    69 => "11000000010000111110011110011011", 
    70 => "11000001001010101010011110110000", 
    71 => "11000000000011000010001011111111", 
    72 => "11000001010000001101101001001010", 
    73 => "11000000110110111110000000000110", 
    74 => "11000000111101001000111111110011", 
    75 => "11000000001101110111101010001100", 
    76 => "01000000100100111100111000010010", 
    77 => "00111111101111010000010110101011", 
    78 => "11000000011110011111000100100111", 
    79 => "10111111100110010000111111011000", 
    80 => "11000000010101000001010000110100", 
    81 => "11000001001010010000000100101001", 
    82 => "11000000100010100001011101110001", 
    83 => "11000000010110100101100110110010", 
    84 => "11000000110101011110110011000011", 
    85 => "11000001000001110110110010111101", 
    86 => "11000000110011011111011111010111", 
    87 => "00111110100000010001001101111110", 
    88 => "11000000111110111000001001100011", 
    89 => "11000000101101101000000101000111", 
    90 => "11000000010001100010001110000111", 
    91 => "11000000100111001000001011011111", 
    92 => "11000000111100101000110110011001", 
    93 => "10111111111100011000011001001101", 
    94 => "01000000100000110101110001110000", 
    95 => "00111111101010110100001000001010", 
    96 => "11000000111101001110100110100001", 
    97 => "11000000011010110010001111010100", 
    98 => "11000000001101111000101111111101", 
    99 => "10111110111111101000111001100000", 
    100 => "11000000101010111110010100011110", 
    101 => "11000000101010011010110100000010", 
    102 => "10111101110111001110111101001010", 
    103 => "00111111010110111111101011100111", 
    104 => "01000001011001001101111101111111", 
    105 => "11000000110110011100100101001100", 
    106 => "11000000110010100010001101110001", 
    107 => "11000000101011010010010000000101", 
    108 => "11000000100000111110111000010010", 
    109 => "11000000100111110111010011010001", 
    110 => "01000000101111110010011101100100", 
    111 => "11000000001010010010010000100110", 
    112 => "11000000100101111000000101100011", 
    113 => "11000001001100100010010110000000", 
    114 => "01000000001011011011110000000000", 
    115 => "10111111011111011101001101011100", 
    116 => "11000000111001010101111000010011", 
    117 => "11000001000011101011011101100110", 
    118 => "00111111010101111101111100110001", 
    119 => "11000000010101110111000111100001", 
    120 => "11000000100101001101100010000000", 
    121 => "11000000011000011001000110001001", 
    122 => "01000000101000000101001010101000", 
    123 => "11000000000101101001001011110000", 
    124 => "10111111111011111010000000010111", 
    125 => "01000000110011001110111101111111", 
    126 => "10111101100010111000100101100100", 
    127 => "11000001010000110111011001000110" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity DNN_HiddenLayer_1_bias is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 128;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of DNN_HiddenLayer_1_bias is
    component DNN_HiddenLayer_1_bias_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    DNN_HiddenLayer_1_bias_rom_U :  component DNN_HiddenLayer_1_bias_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


